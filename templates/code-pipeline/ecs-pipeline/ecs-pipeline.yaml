AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Code Pipeline template'
Parameters:
  BranchName:
    Description: CodeCommit branch name
    Type: String
  RepositoryName:
    Description: CodeComit repository name
    Type: String
  ClusterName:
    Type: String
    Description: Cluster Name which the service belongs
  ServiceName:
    Type: String
    Description: Name of the service to be deployed
  Stage:
    Type: String
    Description: Environment Stage which template will be deployed
  RepositoryUri:
    Type: String
    Description: Uri from ECR repository
  RdsExecutionProjectName:
    Type: String
    Description: The name of the RDS execution Project Name
  DatabaseInfoSecretsManagerArn:
    Type: String
    Description: Arn of database secrets manager
  Region:
    Type: String
    Description: AWS Region
  SecretsManagerGeneralRole:
    Type: String
    Description: Secrets Manager General Role

Resources:
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub code-pipeline-artifact-${Stage}-${RepositoryName}

  AmazonCloudWatchEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:codepipeline:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref AppPipeline
  AmazonCloudWatchEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: !Sub CodeCommitPipelineRule-${Stage}-${RepositoryName}
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Join 
            - ''
            - - 'arn:aws:codecommit:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref RepositoryName
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref BranchName
      Targets:
        - Arn: !Join 
            - ''
            - - 'arn:aws:codepipeline:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref AppPipeline
          RoleArn: !GetAtt 
            - AmazonCloudWatchEventRole
            - Arn
          Id: codepipeline-AppPipeline
  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub ${Stage}-${RepositoryName}-pipeline
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName: !Ref RepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref BuildProject
            RunOrder: 1
            InputArtifacts:
              - Name: SourceOutput
            OutputArtifacts:
              - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref ClusterName
                ServiceName: !Ref ServiceName
              RunOrder: 3
        - Name: RdsExecution
          Actions:
          - Name: RdsExecution
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref RdsExecution
            InputArtifacts:
              - Name: SourceOutput
            OutputArtifacts:
              - Name: RdsBuildOutput
            RunOrder: 4
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: CodePipelinePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            - arn:aws:s3:::elasticbeanstalk*
            Effect: Allow
          - Action:
            - codebuild:*
            Resource: "*"
            Effect: Allow
          - Action:
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - sqs:*
            - iam:PassRole
            - codecommit:*
            - codedeploy:*
            - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${Stage}-${RepositoryName}-CodeBuildPipeline
      Description: !Sub 'CodeBuild for service: ${RepositoryName}'
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image:  aws/codebuild/standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_IMAGE_URI
            Type: PLAINTEXT
            Value: !Ref RepositoryUri
          - Name: SERVICE_NAME
            Type: PLAINTEXT
            Value: !Ref ServiceName
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - npm install
                - npm i npm@latest -g
                - npm install jest -g
                - echo Giving jest permissions
                - chmod 777 ./node_modules/.bin/jest
                - chmod 777 ./node_modules/jest/bin/jest.js
                - ./node_modules/jest/bin/jest.js --forceExit --detectOpenHandles  --maxWorkers=1
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws --version
                - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
                - REPOSITORY_URI=$ECR_IMAGE_URI
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=${COMMIT_HASH:=latest}
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $REPOSITORY_URI:latest .
                - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker images...
                - docker push $REPOSITORY_URI:latest
                - docker push $REPOSITORY_URI:$IMAGE_TAG
                - echo Writing image definitions file...
                - printf '[{"name":"%s","imageUri":"%s"}]' $SERVICE_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
          artifacts:
              files: imagedefinitions.json

  RdsExecution:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref RdsExecutionProjectName
      Description: !Sub 'CodeBuild for project: ${RdsExecutionProjectName}'
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: STAGE
            Value: !Ref ${Stage}
          - Name: DATABASE_INFO_SECRETS_MANAGER_ARN
            Value: !Ref DatabaseInfoSecretsManagerArn
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            secrets-manager:
              HOST: ${DATABASE_INFO_SECRETS_MANAGER_ARN}:host
              USERNAME: ${DATABASE_INFO_SECRETS_MANAGER_ARN}:username
              PASSWORD: ${DATABASE_INFO_SECRETS_MANAGER_ARN}:password
          phases:
            install:
              commands:
                - |-
                    if ls -1qA ./db_updates | grep -q .
                    then
                      sudo apt-get autoremove;
                      apt-get update;
                      apt-get install -y mysql-client;
                    fi
            pre_build:
              commands:
            build:
              commands:
                - |-
                    if ls -1qA ./db_updates | grep -q .
                    then
                      for file in ./db_updates/*.sql; do mysql -u $USERNAME -p$PASSWORD -h $HOST < $file; done
                      exit
                    fi
          artifacts:
            files:
              - '**/*'
      TimeoutInMinutes: 10

  BuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Stage}-${RepositoryName}-CodeBuildRole
      Policies:
        - PolicyName: CodeBuildRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'ec2:*'
                  - 's3:*'
                  - 'codepipeline:*'
                  - 'codebuild:*'
                  - 'iam:*'
                  - 'elasticloadbalancing:*'
                  - 'logs:*'
                  - 'ecs:*'
                  - 'ecr:*'
                  - 'apigateway:*'
                  - 'ssm:*'
                  - 'SNS:*'
                  - 'ses:*'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'secretsmanager:GetSecretValue'
                Effect: Allow
                Resource: !Sub '${SecretsManagerGeneralRole}'

      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  BuildProjectPolicy:
    Type: AWS::IAM::Policy
    DependsOn: CodePipelineArtifactStoreBucket
    Properties:
      PolicyName: !Sub ${Stage}-${RepositoryName}-CodeBuildPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetBucketPolicy
              - s3:GetObject
              - s3:ListBucket
              - ssm:*
            Resource:
              - !Sub 'arn:aws:s3:::${CodePipelineArtifactStoreBucket}/*'
              - !Sub 'arn:aws:s3:::${CodePipelineArtifactStoreBucket}'

          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: '*'
      Roles:
        -
          !Ref BuildProjectRole